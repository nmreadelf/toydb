syntax = "proto3";

package raft;

// An asynchronous Raft service used for intra-cluster message pssing.
// For details on messages, set toydb::raft::transport module.

message State {
  string key = 1;
  string value = 2;
}

message Heartbeat {
  uint64 commit_index = 1;
  uint64 commit_term = 2;
}

message ConfirmLeader {
  uint64 commit_index = 1;
  bool has_committed = 2;
}

message SolicitVote {
  uint64 last_index = 1;
  uint64 last_term = 2;
}

message GrantVote {
}

message Entry {
  uint64 term = 1;
  bytes command = 2;
}

message ReplicateEntries {
  uint64 base_index = 1;
  uint64 base_term = 2;
  repeated Entry entries = 3;
}

message AcceptEntries {
  uint64 last_index = 1;
}

message RejectEntries {
}

message ReadState {
  bytes call_id = 1;
  bytes command = 2;
}

message MutateState {
  bytes call_id = 1;
  bytes command = 2;
}

message ResponseState {
  bytes call_id = 1;
  bytes response = 2;
}

message ResponseError {
  bytes call_id = 1;
  string error = 2;
}

message Message {
  uint64 term = 1;
  string from = 2;
  string to = 3;
  oneof event {
    Heartbeat heartbeat = 4;
    ConfirmLeader confirm_leader = 5;
    SolicitVote solicit_vote = 6;
    GrantVote grant_vote = 7;
    ReplicateEntries replicate_entries = 8;
    AcceptEntries accept_entries = 9;
    RejectEntries reject_entries = 10;
    ReadState read_state = 11;
    MutateState mutate_state = 12;
    ResponseState response_state = 13;
    ResponseError response_error = 14;
  }
}

message Success {
}

service RaftServer {
  rpc Step(Message) returns (Success) {
  };
}